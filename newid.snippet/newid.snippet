<?xml version="1.0" encoding="utf-8"?>

<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create strongly typed ID struct</Title>
			<Author>Miroslav Bartl</Author>
			<Description>Adds boilerplate code for creating a strongly typed ID</Description>
			<Shortcut>newid</Shortcut>
		</Header>
		<Snippet>
			<References>
				<Reference>
					<Assembly>System.dll</Assembly>
				</Reference>
			</References>
			<Declarations>
				<Literal>
					<ID>classname</ID>
					<ToolTip>Replace with specified name</ToolTip>
					<Default>MyClass</Default>
				</Literal>
				<Literal>
					<ID>idtype</ID>
					<ToolTip>Primitive of the identifier. int, string, Guid...</ToolTip>
					<Default>string</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[ 
using System;

	[Serializable]
	/// <summary>
	/// Value representing the identity of $classname$.
	/// </summary>
	public readonly struct $classname$Id : IComparable<$classname$Id>, IComparable<$classname$Id?>, IEquatable<$classname$Id>, IEquatable<$classname$Id?>
	{
		/// <summary>
		/// Determines whether the type of the Value property is nullable or not.
		/// This information is required in operator overloading methods where 
		/// values of nullable and/or non-nullable structs are compared.
		/// </summary>
		private static readonly bool ValueIsNullable = false;

		/// <summary>
		/// Initializes the <see cref="ValueIsNullable"/> static field.
		/// </summary>
		static $classname$Id()
		{
			Type type = typeof($classname$Id).GetProperty("Value").PropertyType;
			ValueIsNullable = !type.IsValueType || (Nullable.GetUnderlyingType(type) != null);
		}

		/// <summary>
		/// Identity value of the $classname$Id.
		/// </summary>
		public $idtype$ Value { get; }

		/// <summary>
		/// Creates a new value of $classname$Id
		/// </summary>
		/// <param name="value">Identity value</param>
		public $classname$Id(string value)
		{
		     if(ValueIsNullable)
            {
#pragma warning disable CS0472
                if(value == null)
                {
                    throw new InvalidOperationException("The identity " + nameof($classname$Id) + " cannot have a null value. To use null, set the identity property as nullable (\"{nameof($classname$Id)}?\").");
                }
#pragma warning restore CS0472
            }
			Value = value;
		}

		/// <summary>
		/// Creates a new value of <see cref="$classname$Id"/>.
		/// </summary>
		/// <param name="local$classname$Id">Identity value</param>
		/// <returns>Identity struct</returns>
		public static $classname$Id New(string local$classname$Id) => new $classname$Id(local$classname$Id);

		/// <summary>
		/// Checks whether two identity values are equal.
		/// </summary>
		/// <param name="other">Other identity struct.</param>
		/// <returns>True if identities are equal. False otherwise.</returns>
		public bool Equals($classname$Id other) => CompareTo(other) == 0;
		

		/// <summary>
		/// Checks whether two identity values (one of them nullable) are equal.
		/// </summary>
		/// <param name="other">Other identity</param>
		/// <returns>True if identities are equal. False otherwise.</returns>
		public bool Equals($classname$Id? other) => CompareTo(other) == 0;

		/// <summary>
		/// Checks whether two values of <see cref="$classname$Id"/> are equal.
		/// </summary>
		/// <param name="other">Other identity struct.</param>
		/// <returns>True if identities are equal. False otherwise.</returns>
		public override bool Equals(object obj)
		{
			if (obj is $classname$Id)
				return CompareTo(($classname$Id)obj) == 0;

			return false;
		}

		/// <summary>
		/// Compares values of two <see cref="$classname$Id"/> identities.
		/// </summary>
		/// <param name="other">Other identity struct.</param>
		/// <returns>0 if two <see cref="$classname$Id"/> are equal, 1 if this <see cref="$classname$Id"/> comes after the other <see cref="$classname$Id"/> and -1 if this <see cref="$classname$Id"/> comes before the other <see cref="$classname$Id"/>.</returns>
		public int CompareTo($classname$Id other) => Value.CompareTo(other.Value);

		/// <summary>
		/// Compares the struct with the other nullable struct value.
		/// </summary>
		/// <param name="other">Other nullable struct value</param>
		/// <returns>0 if two <see cref="$classname$Id"/> are equal, 1 if this <see cref="$classname$Id"/> comes after the other <see cref="$classname$Id"/> and -1 if this <see cref="$classname$Id"/> comes before the other <see cref="$classname$Id"/>.</returns>
		public int CompareTo($classname$Id? other)
		{
			// if nullable has value, compare the struct like a non-nullable
			if (other.HasValue)
				return other.Value.CompareTo(this);

			//otherwise the non-null value is considered greater
            return 1;
		}

		/// <summary>
		/// Returns the hashcode of the <see cref="$classname$Id"/>.
		/// </summary>
		/// <returns>Hash code of <see cref="$classname$Id"/></returns>
		public override int GetHashCode() => Value.GetHashCode();

		/// <summary>
		/// Returns the string representation of <see cref="$classname$Id"/>.
		/// </summary>
		/// <returns>String representation of <see cref="$classname$Id"/></returns>
		public override string ToString() => Value.ToString();

		/// <summary>
		/// Method for allowing explicit conversion from the primitive type to the <see cref="$classname$Id"/>.
		/// </summary>
		/// <param name="value">Value of the identity</param>
		public static explicit operator $classname$Id(string value) => new $classname$Id(value);

		/// <summary>
		/// Method for allowing explicit conversion from <see cref="$classname$Id"/> to the identity primitive type.
		/// </summary>
		/// <param name="local$classname$Id">Identity struct</param>
		public static explicit operator string($classname$Id local$classname$Id) => local$classname$Id.Value;

		/// <summary>
		/// Overloads the equality operator for comparing the values of two <see cref="$classname$Id"/>.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are equal. False otherwise.</returns>
		public static bool operator ==($classname$Id a, $classname$Id b) => a.CompareTo(b) == 0;

		/// <summary>
		/// Overloads the non-equality operator for comparing the values of two <see cref="$classname$Id"/>.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are not equal. False otherwise.</returns>
		public static bool operator !=($classname$Id a, $classname$Id b) => !(a == b);

		/// <summary>
		/// Overloads the equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// $classname$ being nullable. <see cref="$classname$Id"/>? null value is considered equal 
		/// with <see cref="$classname$Id"/>.Value == null. Therefore if the underlying type is nullable and the
		/// value contains null, that is considered the same thing as if the struct itself was null.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are equal. False otherwise.</returns>
		public static bool operator ==($classname$Id? a, $classname$Id b) => b.CompareTo(a) == 0;

		/// <summary>
		/// Overloads the non-equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// <see cref="$classname$Id"/> being nullable.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are not equal. False otherwise.</returns>
		public static bool operator !=($classname$Id? a, $classname$Id b) => !(a == b);

		/// <summary>
		/// Overloads the equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// <see cref="$classname$Id"/> being nullable.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are equal. False otherwise.</returns>
		public static bool operator ==($classname$Id a, $classname$Id? b) => a.CompareTo(b) == 0;

		/// <summary>
		/// Overloads the non-equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// <see cref="$classname$Id"/> being nullable.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are not equal. False otherwise.</returns>
		public static bool operator !=($classname$Id a, $classname$Id? b) => !(a == b);

		/// <summary>
		/// Overloads the equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// <see cref="$classname$Id"/> being nullable.
		/// </summary>
		/// <param name="a">First $classname$Id</param>
		/// <param name="b">Second $classname$Id</param>
		/// <returns>True if two $classname$Id values are equal. False otherwise.</returns>
		public static bool operator ==($classname$Id? a, $classname$Id? b) => CompareNullableWithNullable(a, b);

		/// <summary>
		/// Overloads the non-equality operator for comparing the values of two <see cref="$classname$Id"/> with one
		/// <see cref="$classname$Id"/> being nullable.
		/// </summary>
		/// <param name="a">First <see cref="$classname$Id"/></param>
		/// <param name="b">Second <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are not equal. False otherwise.</returns>
		public static bool operator !=($classname$Id? a, $classname$Id? b) => !CompareNullableWithNullable(a, b);

		/// <summary>
		/// Private helper method for comparing two nullable <see cref="$classname$Id"/> values.
		/// </summary>
		/// <param name="a">First nullable value of <see cref="$classname$Id"/></param>
		/// <param name="b">Second nullable value of <see cref="$classname$Id"/></param>
		/// <returns>True if two <see cref="$classname$Id"/> values are not equal. False otherwise.</returns>
		private static bool CompareNullableWithNullable($classname$Id? a, $classname$Id? b)
		{
			// if neither has value, they are both null and therefore are equal.
			if (!a.HasValue && !b.HasValue)
				return true;

			if (a.HasValue)
				return a.Value == b;

			return b.Value == a;
		}
	}
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
