<?xml version="1.0" encoding="utf-8"?>

<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create strongly typed ID struct</Title>
			<Author>Miroslav Bartl</Author>
			<Description>Adds boilerplate code for creating a strongly typed ID</Description>
			<Shortcut>newid</Shortcut>
		</Header>
		<Snippet>
			<References>
				<Reference>
					<Assembly>System.dll</Assembly>
				</Reference>
			</References>
			<Declarations>
				<Literal>
					<ID>classname</ID>
					<ToolTip>Replace with specified name</ToolTip>
					<Default>MyClass</Default>
				</Literal>
				<Literal>
					<ID>idtype</ID>
					<ToolTip>Primitive of the identifier. int, string, Guid...</ToolTip>
					<Default>string</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[ 
    using System;
	
    /// <summary>
    /// Strongly typed ID struct representing the identity of $classname$.
    /// </summary>
    public readonly struct $classname$Id : IComparable<$classname$Id>, IEquatable<$classname$Id>
    {
	
	    /// <summary>
        /// Determines whether the type of the Value property is nullable or not.
        /// This information is required in operator overloading methods where 
        /// values of nullable and/or non-nullable structs are compared.
        /// </summary>
        private static readonly bool ValueIsNullable = false;
		
		/// <summary>
        /// Initializes the <see cref="ValueIsNullable"/> static field.
        /// </summary>
        static $classname$Id()
        {
            Type type = typeof($classname$Id).GetProperty("Value").PropertyType;
            ValueIsNullable = !type.IsValueType || (Nullable.GetUnderlyingType(type) != null);
        }
		
		/// <summary>
        /// Identity value of the $classname$.
        /// </summary>
        public $idtype$ Value { get; }

        /// <summary>
        /// Creates a new value of $classname$Id
        /// </summary>
        /// <param name="value">Identity value</param>
        public $classname$Id($idtype$ value)
        {
            Value = value;
        }

        /// <summary>
        /// Creates a new value of $classname$Id
        /// </summary>
        /// <param name="local$classname$">Identity value</param>
        /// <returns>Strongly typed identity</returns>
        public static $classname$Id New($idtype$ local$classname$) => new $classname$Id(local$classname$);

        /// <summary>
        /// Checks whether two strongly typed identities are equal.
        /// </summary>
        /// <param name="other">Other identity struct.</param>
        /// <returns>True if identities are equal. False otherwise.</returns>
        public bool Equals($classname$Id other) => this.Value.Equals(other.Value);
		
		/// <summary>
        /// Compares values of two $classname$Id identities. If the value is nullable then
		/// null values precede non-null values. Non-null values are compared using
		/// CompareTo method of the value type.
        /// </summary>
        /// <param name="other">Other identity struct.</param>
        /// <returns>0 if two $classname$Id are equal, 1 if this $classname$Id comes after the other $classname$Id and -1 if this $classname$Id comes before the other $classname$Id.</returns>
        public int CompareTo($classname$Id other)        
		{
            if(ValueIsNullable)
            {
				// this code was generated from snippet
				// the snippet does not know whether the Value type chosen
				// is nullable or not. Therefore we disable the null comparison
				// warning just for convenience.
#pragma warning disable CS0472
                if (Value == null && other.Value == null)
                    return 0;

                if (Value == null && other.Value != null)
                    return -1;

                if (Value != null && other.Value == null)
                    return 1;                
#pragma warning restore CS0472
                
            }
            return Value.CompareTo(other.Value);
        }

        /// <summary>
        /// Checks whether two values of $classname$Id are equal.
        /// </summary>
        /// <param name="other">Other identity struct.</param>
        /// <returns>True if identities are equal. False otherwise.</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is $classname$Id other && Equals(other);
        }

        /// <summary>
        /// Returns the hashcode of the $classname$Id.
        /// </summary>
        /// <returns>Hash code of  $classname$Id</returns>
        public override int GetHashCode() => Value.GetHashCode();
		
		/// <summary>
        /// Returns the string representation of $classname$Id
        /// </summary>
        /// <returns>String representation of $classname$Id</returns>
        public override string ToString()
        {
            if(ValueIsNullable)
            {
				// this code was generated from snippet
				// the snippet does not know whether the Value type chosen
				// is nullable or not. Therefore we disable the null comparison
				// warning just for convenience.
#pragma warning disable CS0472
                if (Value == null)
                    return "";
#pragma warning restore CS0472
            }

            return Value.ToString();
        }
		
        /// <summary>
        /// Method for allowing explicit conversion from the primitive type to the $classname$Id.
        /// </summary>
        /// <param name="value">Value of the identity</param>
        public static explicit operator $classname$Id($idtype$ value) => new $classname$Id(value);
	        
		/// <summary>
        /// Method for allowing explicit conversion from $classname$Id to the identity primitive type.
        /// </summary>
        /// <param name="local$classname$">Strongly typed identity struct</param>
        public static explicit operator $idtype$($classname$Id local$classname$) => local$classname$.Value;
		
		/// <summary>
        /// Overloads the equality operator for comparing the values of two $classname$Id.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are equal. False otherwise.</returns>
        public static bool operator ==($classname$Id a, $classname$Id b) => a.CompareTo(b) == 0;
		
		/// <summary>
        /// Overloads the non-equality operator for comparing the values of two $classname$Id.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        public static bool operator !=($classname$Id a, $classname$Id b) => !(a == b);
		
		/// <summary>
        /// Overloads the equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable. $classname$Id? null value is considered equal 
		/// with $classname$Id.Value == null. Therefore if the underlying type is nullable and the
		/// value contains null, that is considered the same thing as if the struct itself was null.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are equal. False otherwise.</returns>
		public static bool operator ==($classname$Id? a, $classname$Id b) => CompareNonNullableWithNullable(b, a);
		
		/// <summary>
        /// Overloads the non-equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        public static bool operator !=($classname$Id? a, $classname$Id b) => !CompareNonNullableWithNullable(b, a);
		
		/// <summary>
        /// Overloads the equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are equal. False otherwise.</returns>
        public static bool operator ==($classname$Id a, $classname$Id? b) => CompareNonNullableWithNullable(a, b);
		
		/// <summary>
        /// Overloads the non-equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        public static bool operator !=($classname$Id a, $classname$Id? b) => !CompareNonNullableWithNullable(a, b);
		
		/// <summary>
        /// Overloads the equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are equal. False otherwise.</returns>
        public static bool operator ==($classname$Id? a, $classname$Id? b) => CompareNullableWithNullable(a, b);
		
		/// <summary>
        /// Overloads the non-equality operator for comparing the values of two $classname$Id with one
		/// $classname$ being nullable.
        /// </summary>
        /// <param name="a">First $classname$Id</param>
        /// <param name="b">Second $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        public static bool operator !=($classname$Id? a, $classname$Id? b) => !CompareNullableWithNullable(a, b);
		
		/// <summary>
		/// Private helper method for comparing a non-nullable $classname$Id 
		/// with nullable $classname$Id. $classname$Id? null value is considered equal 
		/// with $classname$Id.Value == null. Therefore if the underlying type is nullable and the
		/// value of the other struct is null, that is considered the same thing as if the 
		/// struct itself was null.
		/// </summary>
		/// <param name="nonNullable">Non-nullable value of $classname$Id</param>
        /// <param name="nullable">Nullable value of $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        private static bool CompareNonNullableWithNullable($classname$Id nonNullable, $classname$Id? nullable)
        {
			// if nullable has value, compare the struct like a non-nullable
            if (nullable.HasValue)
                return nullable.Value == nonNullable;
						
			// otherwise if the non-nullable value is null, the two are considered equal
			
			#pragma warning disable CS0472
            if (ValueIsNullable && nonNullable.Value == null)
                return true;
			#pragma warning restore CS0472
			
            return false;
        }
		
		/// <summary>
		/// Private helper method for comparing two nullable $classname$Id values.
		/// </summary>
		/// <param name="a">First nullable value of $classname$Id</param>
        /// <param name="b">Second nullable value of $classname$Id</param>
        /// <returns>True if two $classname$Id values are not equal. False otherwise.</returns>
        private static bool CompareNullableWithNullable($classname$Id? a, $classname$Id? b)
        {
			// if neither has value, they are both null and therefore are equal.
            if (!a.HasValue && !b.HasValue)
                return true;
			
			// if first or second has value, compare it 
			// with the <see cref="CompareNonNullableWithNullable" />
            
			if (a.HasValue)
                return CompareNonNullableWithNullable(a.Value, b);

            return CompareNonNullableWithNullable(b.Value, a);
        }
    }
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
