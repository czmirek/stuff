<?xml version="1.0" encoding="utf-8"?>

<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create strongly typed ID struct</Title>
			<Author>Miroslav Bartl</Author>
			<Description>Adds boilerplate code for creating a strongly typed ID</Description>
			<Shortcut>newid</Shortcut>
		</Header>
		<Snippet>
			<References>
				<Reference>
					<Assembly>System.dll</Assembly>
				</Reference>
			</References>
			<Declarations>
				<Literal>
					<ID>classname</ID>
					<ToolTip>Replace with specified name</ToolTip>
					<Default>MyClass</Default>
				</Literal>
				<Literal>
					<ID>idtype</ID>
					<ToolTip>Primitive of the identifier. int, string, Guid...</ToolTip>
					<Default>string</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[ 
    using System;
    public readonly struct $classname$Id : IComparable<$classname$Id>, IEquatable<$classname$Id>
    {
        public $idtype$ Value { get; }

        public $classname$Id($idtype$ value)
        {
            Value = value;
        }

        public static $classname$Id New($idtype$ $classname$Id) => new $classname$Id($classname$Id);

        public bool Equals($classname$Id other) => this.Value.Equals(other.Value);
        public int CompareTo($classname$Id other) => Value.CompareTo(other.Value);

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is $classname$Id other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();
        public override string ToString() => Value.ToString();

        public static bool operator ==($classname$Id a, $classname$Id b) => a.CompareTo(b) == 0;
        public static bool operator !=($classname$Id a, $classname$Id b) => !(a == b);

        public static explicit operator $classname$Id($idtype$ value) => new $classname$Id(value);
        public static explicit operator $idtype$($classname$Id local_$classname$) => local_$classname$.ToString();
    }
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>

